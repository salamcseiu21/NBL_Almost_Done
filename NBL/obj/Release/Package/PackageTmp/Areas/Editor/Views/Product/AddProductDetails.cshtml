
@model NBL.Models.ViewModels.Products.ViewCreateProductDetailsModel

@{
    ViewBag.Title = "Add Product Details";
    Layout = "~/Views/Shared/_UserLayoutPage.cshtml";
    var date = DateTime.Now.Date.ToString("dd-MMMM-yyyy");
}

<section class="content">
   

    <div class="row">
        <div class="col-md-6 col-md-offset-3">
            <h3 class="text-center text-green">Add Product Details</h3>
            @if (TempData["Result"] != null)
            {
                <div class="text-center">
                    @Html.Raw(TempData["Result"])
                </div>
            }
            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()

                <div class="form-horizontal">
                    <hr/>
                    @Html.ValidationSummary(true, "", new {@class = "text-danger"})
                    <div class="form-group">
                        @Html.LabelFor(model => model.ProductName, htmlAttributes: new {@class = "control-label col-md-2"})
                        <div class="col-md-10">
                            <input type="text" name="ProductName" id="ProductName" class="form-control" placeholder="Type Product Name" required />
                            <input type="hidden" id="ProductId" name="ProductId" />
                            @Html.ValidationMessageFor(model => model.ProductName, "", new {@class = "text-danger"})
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="OldUnitPrice" class="control-label col-md-2"> Old Price (&#2547;)</label>
                        <div class="col-md-10">

                            <input type="number" id="OldUnitPrice" name="OldUnitPrice" class="form-control text-right" readonly />

                        </div>
                    </div>
                    <div class="form-group">
                        <label for="LastUpdatedDate" class="control-label col-md-2">Last Update Date</label>
                        <div class="col-md-10">
                            <input type="text" id="LastUpdatedDate" name="LastUpdatedDate" class="form-control" readonly />
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.UnitPrice, htmlAttributes: new {@class = "control-label col-md-2"})
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.UnitPrice, new {htmlAttributes = new {@class = "form-control text-right",placeholder="Enter product unit price..", onkeypress = "if ( isNaN(this.value + String.fromCharCode(event.keyCode) )) return false;" } })
                            @Html.ValidationMessageFor(model => model.UnitPrice, "", new {@class = "text-danger"})
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="UpdatedDate" class="control-label col-md-2">Joining Date</label>
                        <div class="col-md-10">
                            <input type="text" id="UpdatedDate" name="UpdatedDate" value="@date" class="form-control"/>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <a href="~/editor" class="btn btn-danger">Cancel</a>

                            <input type="submit" value="Save" class="btn btn-info"/>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

</section>
@section Scripts
{
    <script>
        $(document).ready(function() {
            $("#UpdatedDate").datepicker({ dateFormat: 'dd-MM-yy' });

            $("#ProductName").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        //url: RootUrl + 'common/ProductNameAutoComplete/',
                        url: RootUrl + 'common/ProductNameAutoComplete/',
                        data: "{ 'prefix': '" + request.term + "'}",
                        dataType: "json",
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        success: function (data) {
                            response($.map(data,
                                function (item) {
                                    return item;
                                }));
                        },
                        error: function (response) {
                            alert(response.responseText);
                        },
                        failure: function (response) {
                            alert(response.responseText);
                        }
                    });
                },
                select: function (e, i) {
                    $("#ProductId").val(i.item.val);
                    var json = { productId: i.item.val };
                    $.ajax({
                        type: "POST",
                        url: RootUrl + 'Common/GetProductById/',
                        contentType: "application/json; charset=utf-8",
                        data: JSON.stringify(json),
                        success: function (data) {

                            var unitPrice = data.UnitPrice;
                            var lastPriceUpdateDate = data.LastPriceUpdateDate;
                            $("#OldUnitPrice").val(unitPrice);
                            $("#LastUpdatedDate").val(new Date(parseInt(lastPriceUpdateDate.substr(6))));
                           
                        }
                    });

                },
                minLength: 1
            });
        });

    </script>
}
