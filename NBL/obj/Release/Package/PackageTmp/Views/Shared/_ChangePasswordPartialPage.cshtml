@model NBL.Models.EntityModels.Identities.User
@{
    ViewBag.Title = "ChangePassword";
    Layout = "~/Views/Shared/_UserLayoutPage.cshtml";
}


<div class="content">
    <h3 class="text-center text-green">Change Password</h3>
    @using (Html.BeginForm())
    {
        <div class="row">
        <div class="form-horizontal">
            <div class="col-md-3"></div>
            <div class="col-md-6">
                <div class="text-center">
                    @if (TempData["Message"] != null)
                    {
                        <p style="color: forestgreen">@Html.Raw(TempData["Message"])</p>
                    }
                    @if (TempData["Error"] != null)
                    {
                        <p style="color: orangered">@Html.Raw(TempData["Error"])</p>
                    }
                </div>
                <div class="form-group">
                    <label class="control-label col-md-3">Old Password</label>
                    <div class="col-md-9">
                        <input type="password" id="ConfirmOldPassword" name="ConfirmOldPassword" class="form-control" placeholder="Enter old Password" required/>
                        <input type="password" hidden id="OldPassword" name="OldPassword" value="@Model.Password"/>
                        <input type="text" hidden id="UserId" name="UserId" value="@Model.UserId"/>
                        <span id='oldpassowrdmatching'></span>
                    </div>
                </div>
                <div class="form-group">
                    <label class="control-label col-md-3">New Password</label>
                    <div class="col-md-9">
                        <input type="password" id="Password" name="Password" class="form-control" placeholder="Enter Password" pattern="(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{6,}" required/>
                     
                      
                    </div>
                </div>
                <div class="form-group">
                    <label class="control-label col-md-3">Confirm New Password</label>
                    <div class="col-md-9">
                        <input type="password" id="ConfirmPassword" name="ConfirmPassword" class="form-control" placeholder="Confirm Password" required/>
                        <span id='message'></span>
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-3 col-md-9">
                        @Html.ActionLink("Cancel", "Home", "Home", null, new {@class = "btn btn-danger"})
                        <input type="submit" value="Update" class="btn btn-success" id="AddButton"/>
                    </div>
                </div>
                <div id="message1">
                    <h3>Password must contain the following:</h3>
                    <p id="letter" class="invalid">A <b>lowercase</b> letter</p>
                    <p id="capital" class="invalid">A <b>capital (uppercase)</b> letter</p>
                    <p id="number" class="invalid">A <b>number</b></p>
                    <p id="length" class="invalid">Minimum <b>6 characters</b></p>
                </div>
            </div>
            <div class="col-md-3"></div>
        </div>

        </div>
    }
    
    
</div>

@section Styles
{
    <style>
    /* The message box is shown when the user clicks on the password field */
    #message1 {
        display:none;
        background: #f1f1f1;
        color: #000;
        position: relative;
        padding: 20px;
        margin-top: 10px;
    }

    #message1 p {
        padding: 10px 35px;
        font-size: 18px;
    }

    /* Add a green text color and a checkmark when the requirements are right */
    .valid {
        color: green;
    }

    .valid:before {
        position: relative;
        left: -35px;
        content: url('~/Images/ok.png');
    }

    /* Add a red text color and an "x" icon when the requirements are wrong */
    .invalid {
        color: red;
    }

    .invalid:before {
        position: relative;
        left: -35px;
        content: url('~/Images/wrong.png');
    }
</style>
}

@section Scripts
{
    <script>
        $('#Password, #ConfirmPassword').on('keyup',
            function() {
                if ($('#Password').val() === $('#ConfirmPassword').val()) {
                    $('#message').html('Matching').css('color', 'green');

                } else
                    $('#message').html('Not Matching').css('color', 'red');

            });
    </script>
    
    <script>
        $('#OldPassword, #ConfirmOldPassword').on('keyup',
            function() {
                if ($('#OldPassword').val() === $('#ConfirmOldPassword').val()) {
                    $('#oldpassowrdmatching').html('Matching').css('color', 'green');

                } else
                    $('#oldpassowrdmatching').html('Not Matching').css('color', 'red');

            });
    </script>
    
    
    
    @* Password strength validate *@
    
    <script>
        var myInput = document.getElementById("Password");
        var letter = document.getElementById("letter");
        var capital = document.getElementById("capital");
        var number = document.getElementById("number");
        var length = document.getElementById("length");

// When the user clicks on the password field, show the message box
        myInput.onfocus = function() {
            document.getElementById("message1").style.display = "block";
        }

// When the user clicks outside of the password field, hide the message box
        myInput.onblur = function() {
            document.getElementById("message1").style.display = "none";
        }

// When the user starts to type something inside the password field
        myInput.onkeyup = function() {
            // Validate lowercase letters
            var lowerCaseLetters = /[a-z]/g;
            if(myInput.value.match(lowerCaseLetters)) { 
                letter.classList.remove("invalid");
                letter.classList.add("valid");
            } else {
                letter.classList.remove("valid");
                letter.classList.add("invalid");
            }

            // Validate capital letters
            var upperCaseLetters = /[A-Z]/g;
            if(myInput.value.match(upperCaseLetters)) { 
                capital.classList.remove("invalid");
                capital.classList.add("valid");
            } else {
                capital.classList.remove("valid");
                capital.classList.add("invalid");
            }

            // Validate numbers
            var numbers = /[0-9]/g;
            if(myInput.value.match(numbers)) { 
                number.classList.remove("invalid");
                number.classList.add("valid");
            } else {
                number.classList.remove("valid");
                number.classList.add("invalid");
            }

            // Validate length
            if(myInput.value.length >= 6) {
                length.classList.remove("invalid");
                length.classList.add("valid");
            } else {
                length.classList.remove("valid");
                length.classList.add("invalid");
            }
        }
    </script>
}
