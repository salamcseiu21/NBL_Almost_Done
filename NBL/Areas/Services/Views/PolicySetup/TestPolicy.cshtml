@model NBL.Models.EntityModels.Services.TestPolicyModel
@{
    ViewBag.Title = "Test Policy";
    Layout = "~/Views/Shared/_UserLayoutPage.cshtml";
}

<section class="content">
    <div class="panel panel-info">
        <div class="panel panel-heading" style="font-size: 22px;font-weight: bolder">Test Policy Entry </div>
        <div class="panel panel-body">
            @using (Html.BeginForm())
            {
                <div class="form-horizontal">
                    <div class="col-md-6 col-md-offset-3">
                        <div class="form-group">
                            @Html.LabelFor(model => model.TestCategoryId, new {@class = "control-label col-md-3"})
                            <div class="col-md-9">
                                @Html.DropDownListFor(model => model.TestCategoryId, null, "--Select--", new {@class = "form-control"})
                                @Html.ValidationMessageFor(model => model.TestCategoryId, "", new {@class = "text-danger"})
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProductName, new {@class = "control-label col-md-3"})
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.ProductName, new {htmlAttributes = new {@class = "form-control", placeholder = "Enter product Name"}})
                                @Html.ValidationMessageFor(model => model.ProductName, "", new {@class = "text-danger"})
                                <input type="hidden" id="ProductId" name="ProductId" />
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Parameter, new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.Parameter, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter Parameter Name" } })
                                @Html.ValidationMessageFor(model => model.Parameter, "", new { @class = "text-danger" })
                               
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.AcceptableValue, new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.AcceptableValue, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter Acceptable Value" } })
                                @Html.ValidationMessageFor(model => model.AcceptableValue, "", new { @class = "text-danger" })
                               
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Remarks, new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.Remarks, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter remarks" } })
                                @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                               
                            </div>
                        </div>
                        <div class="form-group">
                          
                            <div class="col-md-9 col-md-offset-3">
                                <input type="submit" value="Save" class="btn btn-info"/>
                                @Html.ActionLink("Back","ViewTestPolicy",new {area="Services"},new {@class="btn btn-danger"})
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</section>

@section Scripts
{
    <script>

        $(function () {
            $("#ProductName").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: RootUrl + 'common/ProductNameAutoComplete/',
                        // url: RootUrl + 'common/ProductAutoComplete/',
                        data: "{ 'prefix': '" + request.term + "'}",
                        dataType: "json",
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        success: function (data) {
                            response($.map(data,
                                function (item) {
                                    return item;
                                }));
                        },
                        error: function (response) {
                            alert(response.responseText);
                        },
                        failure: function (response) {
                            alert(response.responseText);
                        }
                    });
                },
                select: function (e, i) {
                    $("#ProductId").val(i.item.val);
                },
                minLength: 1
            });
        });
    </script>
}
